/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContentForTwitterPost
 */
export interface ContentForTwitterPost {
    /**
     * 
     * @type {number}
     * @memberof ContentForTwitterPost
     */
    readonly id?: number;
    /**
     * The text for twitter post. Max length: 280 characters
     * @type {string}
     * @memberof ContentForTwitterPost
     */
    text: string;
    /**
     * Who created the text, maybe from OpenAI or a website user
     * @type {string}
     * @memberof ContentForTwitterPost
     */
    creator: string;
    /**
     * 
     * @type {number}
     * @memberof ContentForTwitterPost
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof ContentForTwitterPost
     */
    project?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ContentForTwitterPost
     */
    topic?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContentForTwitterPost
     */
    readonly image?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentForTwitterPost
     */
    readonly twitterUsername?: string;
    /**
     * 
     * @type {Date}
     * @memberof ContentForTwitterPost
     */
    readonly createdTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContentForTwitterPost
     */
    readonly modifiedTime?: Date | null;
}

/**
 * Check if a given object implements the ContentForTwitterPost interface.
 */
export function instanceOfContentForTwitterPost(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "creator" in value;

    return isInstance;
}

export function ContentForTwitterPostFromJSON(json: any): ContentForTwitterPost {
    return ContentForTwitterPostFromJSONTyped(json, false);
}

export function ContentForTwitterPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentForTwitterPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'text': json['text'],
        'creator': json['creator'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'project': !exists(json, 'project') ? undefined : json['project'],
        'topic': !exists(json, 'topic') ? undefined : json['topic'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'twitterUsername': !exists(json, 'twitter_username') ? undefined : json['twitter_username'],
        'createdTime': !exists(json, 'created_time') ? undefined : (new Date(json['created_time'])),
        'modifiedTime': !exists(json, 'modified_time') ? undefined : (json['modified_time'] === null ? null : new Date(json['modified_time'])),
    };
}

export function ContentForTwitterPostToJSON(value?: ContentForTwitterPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'creator': value.creator,
        'status': value.status,
        'project': value.project,
        'topic': value.topic,
    };
}

