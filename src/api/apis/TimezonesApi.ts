/* tslint:disable */
/* eslint-disable */
/**
 * Content Creator and Scheduler API
 * Content Creator and Scheduler API for frontend
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Timezone,
} from '../models';
import {
    TimezoneFromJSON,
    TimezoneToJSON,
} from '../models';

export interface TimezonesReadRequest {
    id: number;
}

/**
 * 
 */
export class TimezonesApi extends runtime.BaseAPI {

    /**
     * This viewset automatically provides `list` and `retrieve` actions.
     */
    async timezonesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Timezone>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/timezones/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimezoneFromJSON));
    }

    /**
     * This viewset automatically provides `list` and `retrieve` actions.
     */
    async timezonesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Timezone>> {
        const response = await this.timezonesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list` and `retrieve` actions.
     */
    async timezonesReadRaw(requestParameters: TimezonesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timezone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timezonesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/timezones/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimezoneFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list` and `retrieve` actions.
     */
    async timezonesRead(requestParameters: TimezonesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timezone> {
        const response = await this.timezonesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
