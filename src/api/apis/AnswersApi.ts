/* tslint:disable */
/* eslint-disable */
/**
 * Content Creator and Scheduler API
 * Content Creator and Scheduler API for frontend
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Answer,
} from '../models';
import {
    AnswerFromJSON,
    AnswerToJSON,
} from '../models';

export interface AnswersCreateRequest {
    data: Answer;
}

export interface AnswersDeleteRequest {
    id: string;
}

export interface AnswersPartialUpdateRequest {
    id: string;
    data: Answer;
}

export interface AnswersReadRequest {
    id: string;
}

export interface AnswersUpdateRequest {
    id: string;
    data: Answer;
}

/**
 * 
 */
export class AnswersApi extends runtime.BaseAPI {

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersCreateRaw(requestParameters: AnswersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Answer>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling answersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersCreate(requestParameters: AnswersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Answer> {
        const response = await this.answersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersCurrentProjectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Answer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/current_project/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnswerFromJSON));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersCurrentProject(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Answer>> {
        const response = await this.answersCurrentProjectRaw(initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersDeleteRaw(requestParameters: AnswersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersDelete(requestParameters: AnswersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.answersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Answer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnswerFromJSON));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Answer>> {
        const response = await this.answersListRaw(initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersPartialUpdateRaw(requestParameters: AnswersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Answer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling answersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersPartialUpdate(requestParameters: AnswersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Answer> {
        const response = await this.answersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersReadRaw(requestParameters: AnswersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Answer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersRead(requestParameters: AnswersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Answer> {
        const response = await this.answersReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersUpdateRaw(requestParameters: AnswersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Answer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling answersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async answersUpdate(requestParameters: AnswersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Answer> {
        const response = await this.answersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
