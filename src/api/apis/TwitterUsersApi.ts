/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TwitterAccount,
  TwitterUsersList200Response,
} from '../models';
import {
    TwitterAccountFromJSON,
    TwitterAccountToJSON,
    TwitterUsersList200ResponseFromJSON,
    TwitterUsersList200ResponseToJSON,
} from '../models';

export interface TwitterUsersCreateRequest {
    data: TwitterAccount;
}

export interface TwitterUsersDeleteRequest {
    username: string;
}

export interface TwitterUsersListRequest {
    page?: number;
}

export interface TwitterUsersPartialUpdateRequest {
    username: string;
    data: TwitterAccount;
}

export interface TwitterUsersReadRequest {
    username: string;
}

export interface TwitterUsersUpdateRequest {
    username: string;
    data: TwitterAccount;
}

/**
 * 
 */
export class TwitterUsersApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersCreateRaw(requestParameters: TwitterUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwitterAccount>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling twitterUsersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwitterAccountToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwitterAccountFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersCreate(requestParameters: TwitterUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwitterAccount> {
        const response = await this.twitterUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersDeleteRaw(requestParameters: TwitterUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling twitterUsersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersDelete(requestParameters: TwitterUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.twitterUsersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersListRaw(requestParameters: TwitterUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwitterUsersList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwitterUsersList200ResponseFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersList(requestParameters: TwitterUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwitterUsersList200Response> {
        const response = await this.twitterUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersPartialUpdateRaw(requestParameters: TwitterUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwitterAccount>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling twitterUsersPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling twitterUsersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TwitterAccountToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwitterAccountFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersPartialUpdate(requestParameters: TwitterUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwitterAccount> {
        const response = await this.twitterUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersReadRaw(requestParameters: TwitterUsersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwitterAccount>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling twitterUsersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwitterAccountFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersRead(requestParameters: TwitterUsersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwitterAccount> {
        const response = await this.twitterUsersReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersUpdateRaw(requestParameters: TwitterUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwitterAccount>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling twitterUsersUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling twitterUsersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/twitter-users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TwitterAccountToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwitterAccountFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows twitter users to be viewed or edited.
     */
    async twitterUsersUpdate(requestParameters: TwitterUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwitterAccount> {
        const response = await this.twitterUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
