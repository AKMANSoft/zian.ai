/* tslint:disable */
/* eslint-disable */
/**
 * Content Creator and Scheduler API
 * Content Creator and Scheduler API for frontend
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentForTwitterPost,
} from '../models';
import {
    ContentForTwitterPostFromJSON,
    ContentForTwitterPostToJSON,
} from '../models';

export interface ContentsReadListRequest {
    topic?: string;
    untopic?: string;
}

export interface ContentsReadReadRequest {
    id: string;
}

export interface ContentsReadScheduledRequest {
    topic?: string;
    untopic?: string;
}

/**
 * 
 */
export class ContentsReadApi extends runtime.BaseAPI {

    /**
     * This viewset automatically provides `list`, `retrieve` actions.
     */
    async contentsReadListRaw(requestParameters: ContentsReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentForTwitterPost>>> {
        const queryParameters: any = {};

        if (requestParameters.topic !== undefined) {
            queryParameters['topic'] = requestParameters.topic;
        }

        if (requestParameters.untopic !== undefined) {
            queryParameters['untopic'] = requestParameters.untopic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/contents-read/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentForTwitterPostFromJSON));
    }

    /**
     * This viewset automatically provides `list`, `retrieve` actions.
     */
    async contentsReadList(requestParameters: ContentsReadListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentForTwitterPost>> {
        const response = await this.contentsReadListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `retrieve` actions.
     */
    async contentsReadReadRaw(requestParameters: ContentsReadReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentForTwitterPost>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contentsReadRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/contents-read/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentForTwitterPostFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `retrieve` actions.
     */
    async contentsReadRead(requestParameters: ContentsReadReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentForTwitterPost> {
        const response = await this.contentsReadReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get latest scheduled contents for twitter
     */
    async contentsReadScheduledRaw(requestParameters: ContentsReadScheduledRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentForTwitterPost>>> {
        const queryParameters: any = {};

        if (requestParameters.topic !== undefined) {
            queryParameters['topic'] = requestParameters.topic;
        }

        if (requestParameters.untopic !== undefined) {
            queryParameters['untopic'] = requestParameters.untopic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/contents-read/scheduled/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentForTwitterPostFromJSON));
    }

    /**
     * Get latest scheduled contents for twitter
     */
    async contentsReadScheduled(requestParameters: ContentsReadScheduledRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentForTwitterPost>> {
        const response = await this.contentsReadScheduledRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
